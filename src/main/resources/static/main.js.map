{"version":3,"sources":["./src/app/service/http.service.ts","./src/environments/environment.ts","./src/app/component/word/word.component.ts","./src/app/component/word/word.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/component/word-list/word-list-content/word-list-content.component.ts","./src/app/component/word-list/word-list-content/word-list-content.component.html","./src/app/component/word-list/word-list.component.ts","./src/app/component/word-list/word-list.component.html","./src/app/service/resolver/list/list-resolver.service.ts","./src/app/app-routing.module.ts","./src/app/service/resolver/language/language-resolver.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  private static readonly prefix: String = 'api/'\n\n  constructor(private http: HttpClient) {\n  }\n\n\n  saveWord(body) {\n    return this.http.post(HttpService.prefix + 'word', body);\n  }\n\n  saveWordList(body) {\n    return this.http.post(HttpService.prefix + 'list', body);\n  }\n\n\n  addWordToList(body, listId) {\n    return this.http.post(HttpService.prefix + 'list/' + listId + '/word', body);\n  }\n\n\n  getWords(filter, language?, translationLanguage?) {\n    let params = {filter: filter};\n\n    if (language)\n      params['language'] = language;\n    if (translationLanguage)\n      params['translationLanguage'] = translationLanguage;\n\n    return this.http.get<any[]>(HttpService.prefix + 'word', {params: params});\n  }\n\n  getLanguages() {\n    return this.http.get(HttpService.prefix + 'language');\n  }\n\n  getWordList(id) {\n    return this.http.get<any[]>(HttpService.prefix + \"list/\" + id);\n  }\n\n  getWordsFromList(id) {\n    return this.http.get<any[]>(HttpService.prefix + \"list/\" + id + '/word');\n  }\n\n  //DELETE\n\n  deleteWordFromList(listId, wordId) {\n    return this.http.delete(HttpService.prefix + \"list/\" + listId + '/word/' + wordId);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Component, OnInit} from '@angular/core';\nimport {Subject, timer} from \"rxjs\";\nimport {HttpService} from \"../../service/http.service\";\nimport {debounce} from \"rxjs/operators\";\nimport {ActivatedRoute} from \"@angular/router\";\n\n@Component({\n  selector: 'app-word',\n  templateUrl: './word.component.html',\n  styleUrls: ['./word.component.scss']\n})\nexport class WordComponent implements OnInit {\n\n  subject = new Subject();\n  words: any[];\n  word: String;\n  translations: String[] = [];\n  translation: String;\n  language;\n  translationLanguage;\n  languages;\n\n  constructor(\n    private http: HttpService,\n    private route: ActivatedRoute\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.route.data.subscribe(data => {\n      this.languages = data.languages;\n    });\n\n    this.subject.pipe(debounce(() => timer(500))).subscribe(filter => {\n      if (filter != null)\n        this.http.getWords(filter).subscribe(words => {\n          this.words = words;\n        })\n    })\n\n  }\n\n  search($event) {\n    this.subject.next($event.target.value.toLowerCase())\n  }\n\n  save() {\n\n    let body = {\n      \"language\": this.language,\n      \"original\": this.word,\n      \"translationLanguage\": this.translationLanguage,\n      \"translation\": this.translations\n    }\n\n\n    this.http.saveWord(body).subscribe(\n      () => {\n        this.word = null;\n        this.language = null;\n        this.translationLanguage = null;\n        this.translations = [];\n        this.words = [];\n      },\n      err => {\n      }\n    )\n  }\n\n  setWord(word) {\n\n    this.language = word['language'];\n    this.translationLanguage = word['translationLanguage'];\n    this.word = word['original'];\n    this.translations = word['translation'].split(\",\")\n  }\n\n  addTranslation() {\n    if (this.translation != null && this.translation != \"\") {\n      this.translations.push(this.translation);\n      this.translation = null;\n    }\n  }\n\n  deleteTranslation(trnanslation) {\n    this.translations.splice(this.translations.indexOf(trnanslation), 1);\n  }\n}\n","<div class=\"container-fluid row m-0\" style=\"height: 100vh; justify-content: space-between\">\n  <span class=\"p-0\">\n    <span class=\"col-12 col-md-6 row m-0 p-0\" style=\"width: 100%;\">\n\n\n      <mat-form-field appearance=\"outline\">\n          <mat-label translate>word</mat-label>\n          <input matInput [(ngModel)]=\"word\" (keyup)=\"search($event)\">\n      </mat-form-field>\n\n      <span>\n        <span *ngFor=\"let word of words\" (click)=\"setWord(word)\" class=\"translation\">\n        <h5 style=\"margin: 0px\">{{word['original']}}</h5>\n        <span>\n          <img [src]=\"'https://www.countryflags.io/'+ word['language']+'/flat/16.png'\">\n          <img [src]=\"'https://www.countryflags.io/'+ word['translationLanguage']+'/flat/16.png'\">\n        </span>\n      </span>\n      </span>\n\n    </span>\n\n    <span class=\"col-12 col-md-6 row m-0 p-0\" style=\"width: 100%;\">\n\n      <mat-form-field appearance=\"outline\" class=\"col-12 col-md-6\">\n      <mat-label translate>language</mat-label>\n      <mat-select [(ngModel)]=\"language\">\n        <mat-option *ngFor=\"let language of languages\" [value]=\"language\" class=\"flag\">\n          {{language | translate}}\n          <span>\n            <img [src]=\"'https://www.countryflags.io/'+ language+'/flat/16.png'\">\n          </span>\n        </mat-option>\n      </mat-select>\n      </mat-form-field>\n\n\n\n\n    <mat-form-field appearance=\"outline\" class=\"col-12 col-md-6\">\n      <mat-label translate>translation_language</mat-label>\n      <mat-select [(ngModel)]=\"translationLanguage\">\n        <mat-option *ngFor=\"let language of languages\" [value]=\"language\" class=\"flag\">\n          {{language | translate}}\n          <span>\n            <img [src]=\"'https://www.countryflags.io/'+ language+'/flat/16.png'\">\n          </span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n\n    <span>\n      <div>\n          <mat-form-field appearance=\"outline\" style=\"width: 100%\" class=\"form-field-with-button m-0 p-0\">\n            <mat-label translate>translation</mat-label>\n            <div style=\"display: flex\">\n              <input matInput [(ngModel)]=\"translation\">\n            <button style=\"float:right\" mat-button (click)=\"addTranslation()\" translate><mat-icon>add</mat-icon></button>\n            </div>\n          </mat-form-field>\n      </div>\n\n\n      <div *ngFor=\"let translation of translations\" class=\"translation\">\n        <h5 style=\"margin: 0px\">{{translation}}</h5>\n        <button mat-button color=\"primary\" (click)=\"deleteTranslation(translation)\">\n          <mat-icon>\n            clear\n          </mat-icon>\n        </button>\n      </div>\n    </span>\n    </span>\n  </span>\n\n  <span class=\"bottom-buttons\">\n      <button class=\"col-12 col-sm-6 col-md-3\" style=\"height: 45px; \" mat-raised-button color=\"primary\"\n              (click)=\"save()\">{{'save'|translate}}</button>\n  </span>\n</div>\n\n\n","import {Component, OnInit} from '@angular/core';\nimport {Subject, timer} from \"rxjs\";\nimport {HttpService} from \"./service/http.service\";\nimport {debounce, debounceTime} from \"rxjs/operators\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(\n    private translate: TranslateService\n  ) {\n    translate.addLangs([ 'pl']);\n    translate.setDefaultLang('pl');\n    translate.use('pl')\n  }\n\n\n}\n","<router-outlet></router-outlet>\n<button routerLink=\"word\">Word</button>\n<button routerLink=\"list/0\">List</button>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport {WordComponent} from './component/word/word.component';\nimport {FormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\nimport { WordListComponent } from './component/word-list/word-list.component';\nimport {MatCheckboxModule} from \"@angular/material/checkbox\";\nimport { WordListContentComponent } from './component/word-list/word-list-content/word-list-content.component';\nimport {MatTableModule} from \"@angular/material/table\";\nimport {MatRippleModule} from \"@angular/material/core\";\n\nexport function HttpLoaderFactory(httpClient: HttpClient) {\n  return new TranslateHttpLoader(httpClient);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WordComponent,\n    WordListComponent,\n    WordListContentComponent\n  ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule,\n        FormsModule,\n        MatFormFieldModule,\n        BrowserAnimationsModule,\n        MatButtonModule,\n        TranslateModule.forRoot({\n            loader: {\n                provide: TranslateLoader,\n                useFactory: HttpLoaderFactory,\n                deps: [HttpClient]\n            }\n        }),\n        MatSelectModule,\n        MatInputModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatTableModule,\n        MatRippleModule\n\n    ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {Component, HostListener, OnInit} from '@angular/core';\nimport {MatTableDataSource} from \"@angular/material/table\";\nimport {animate, state, style, transition, trigger} from \"@angular/animations\";\nimport {SelectionModel} from \"@angular/cdk/collections\";\nimport {Subject, timer} from \"rxjs\";\nimport {debounce} from \"rxjs/operators\";\nimport {HttpService} from \"../../../service/http.service\";\nimport {ActivatedRoute} from \"@angular/router\";\n\n@Component({\n  selector: 'app-word-list-content',\n  templateUrl: './word-list-content.component.html',\n  animations: [\n    trigger('detailExpand', [\n      state('collapsed', style({height: '0px', minHeight: '0'})),\n      state('expanded', style({height: '*'})),\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\n    ]),\n  ],\n})\n/**\n * Lista słów\n */\nexport class WordListContentComponent implements OnInit {\n\n  language = 'gb';\n  translationLanguage = 'pl';\n\n  word: String;\n  dataSource: MatTableDataSource<any> = new MatTableDataSource<any>();\n  displayedColumns = ['select', 'word'];\n  expandedElement: any;\n  selection = new SelectionModel<any>(true, []);\n  subject = new Subject();\n  words;\n\n  constructor(\n    private http: HttpService,\n    private route: ActivatedRoute\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.subject.pipe(debounce(() => timer(500))).subscribe(filter => {\n      if (filter != null)\n        this.http.getWords(filter, this.language, this.translationLanguage).subscribe(words => {\n          this.words = words;\n        })\n    })\n\n    this.http.getWordsFromList(this.route.snapshot.params['id']).subscribe(\n      list => {\n        this.dataSource.data = list;\n      }\n    )\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.dataSource.data.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle() {\n    this.isAllSelected() ?\n      this.selection.clear() :\n      this.dataSource.data.forEach(row => this.selection.select(row));\n  }\n\n  /** The label for the checkbox on the passed row */\n  checkboxLabel(row?: any): string {\n    if (!row) {\n      return `${this.isAllSelected() ? 'select' : 'deselect'} all`;\n    }\n    return `${this.selection.isSelected(row) ? 'deselect' : 'select'} row ${row.position + 1}`;\n  }\n\n  search($event) {\n    this.subject.next($event.target.value.toLowerCase())\n  }\n\n  addWord(word) {\n    this.http.addWordToList(word, this.route.snapshot.params['id']).subscribe(\n      success => {\n        this.dataSource.data.push(word);\n        this.dataSource._updateChangeSubscription();\n        this.word = \"\";\n        this.words = null;\n      }\n    )\n  }\n\n  deleteSelectedWords() {\n    this.selection.selected.forEach(elem => {\n      this.http.deleteWordFromList(this.route.snapshot.params['id'], elem.id).subscribe(\n        success => {\n          this.dataSource.data.splice(this.dataSource.data.indexOf(elem),1);\n          this.dataSource._updateChangeSubscription();\n          this.selection.clear();\n        }\n      )\n    })\n  }\n\n}\n","<div class=\"container-fluid m-0\"\n     style=\"height: 100%;display: flex;justify-content: space-between;flex-direction: column;\">\n  <span>\n    <span class=\"col-12 col-md-6 row m-0 p-0\" style=\"width: 100%;\">\n      <mat-form-field appearance=\"outline\" class=\"p-0\">\n          <mat-label translate>new_word</mat-label>\n          <input matInput [(ngModel)]=\"word\" (keyup)=\"search($event)\">\n      </mat-form-field>\n\n      <span>\n        <span matRipple *ngFor=\"let word of words\" (click)=\"addWord(word)\" class=\"translation\">\n          <h5 style=\"margin: 0px\">{{word['original']}}</h5>\n        </span>\n      </span>\n  </span>\n\n  <table mat-table [dataSource]=\"dataSource\" style=\"width: 100%; background: transparent;\">\n\n    <!-- Checkbox Column -->\n    <ng-container matColumnDef=\"select\">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox (change)=\"$event ? masterToggle() : null\"\n                      [checked]=\"selection.hasValue() && isAllSelected()\"\n                      [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n                      [aria-label]=\"checkboxLabel()\"\n                      color=\"primary\">\n        </mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <mat-checkbox (click)=\"$event.stopPropagation()\"\n                      (change)=\"$event ? selection.toggle(row) : null\"\n                      [checked]=\"selection.isSelected(row)\"\n                      [aria-label]=\"checkboxLabel(row)\"\n                      color=\"primary\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"word\">\n      <th mat-header-cell *matHeaderCellDef> {{'word'|translate}} </th>\n      <td mat-cell *matCellDef=\"let element\"> {{element.original}} </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"\n        (click)=\"selection.toggle(row)\">\n    </tr>\n  </table>\n\n  </span>\n\n  <span class=\"bottom-buttons\">\n    <button mat-raised-button *ngIf=\"selection.hasValue()\" color=\"primary\" (click)=\"deleteSelectedWords()\"\n            class=\"bottom-button\">\n    {{'delete' |translate}}\n  </button>\n  </span>\n\n</div>\n","import {Component, HostListener, OnInit} from '@angular/core';\nimport {HttpService} from \"../../service/http.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-word-list',\n  templateUrl: './word-list.component.html',\n  styleUrls: ['./word-list.component.scss']\n})\nexport class WordListComponent implements OnInit {\n\n\n  languages: any[];\n  list;\n  isMobile: boolean = window.innerWidth < 768;\n\n  constructor(\n    private http: HttpService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.route.data.subscribe(data => {\n      this.languages = data.languages;\n      this.list = data.list;\n      if (!this.list)\n        this.list = {private: true};\n    });\n\n\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(event) {\n    if (window.innerWidth > 768)\n      this.isMobile = false;\n    else\n      this.isMobile = true;\n  }\n\n\n  save() {\n    this.http.saveWordList(this.list).subscribe(\n      success => {\n        this.router.navigate(['list', success['id']])\n      },\n      error => {\n        console.error(error);\n      }\n    )\n  }\n\n\n}\n","<div class=\"container-fluid row m-0\" style=\"height: 100vh; justify-content: space-between\">\n\n  <span class=\"container\">\n\n    <mat-form-field appearance=\"outline\" class=\"col-12 col-md-6 p-2\">\n        <mat-label translate>name</mat-label>\n        <input matInput [ngModel]=\"list?.name\" (ngModelChange)=\"list.name=$event\" required>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" class=\"col-12 col-md-6 p-2\">\n      <mat-label translate>language</mat-label>\n      <mat-select [ngModel]=\"list?.language\" (ngModelChange)=\"list.language=$event\" required>\n        <mat-option *ngFor=\"let language of languages\" [value]=\"language\" class=\"flag\">\n          {{language | translate}}\n          <span>\n              <img [src]=\"'https://www.countryflags.io/'+ language+'/flat/16.png'\">\n            </span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" class=\"col-12 col-md-6 p-2\">\n      <mat-label translate>translation_language</mat-label>\n      <mat-select [ngModel]=\"list?.translationLanguage\" (ngModelChange)=\"list.translationLanguage=$event\" required>\n        <mat-option *ngFor=\"let language of languages\" [value]=\"language\" class=\"flag\">\n          {{language | translate}}\n          <span>\n              <img [src]=\"'https://www.countryflags.io/'+ language+'/flat/16.png'\">\n            </span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" class=\"col-12 col-md-6 p-2\">\n        <mat-label translate>description</mat-label>\n      <textarea matInput [ngModel]=\"list?.description\" (ngModelChange)=\"list.description=$event\"></textarea>\n    </mat-form-field>\n\n    <span class=\"col-12 col-md-6 p-2 app-checkbox\">\n      <mat-checkbox [ngModel]=\"list?.private\"\n                    (ngModelChange)=\"list.private=$event\" color=\"primary\">{{'private_list' | translate}}</mat-checkbox>\n    </span>\n\n    <app-word-list-content *ngIf=\"!isMobile\"></app-word-list-content>\n\n  </span>\n\n  <span class=\"bottom-buttons\">\n\n    <button mat-raised-button class=\"bottom-button\"\n            routerLink=\"words\" *ngIf=\"isMobile\" [disabled]=\"list.id == null\">{{'words' |translate}}</button>\n    <button mat-raised-button color=\"primary\" class=\"bottom-button\"\n            (click)=\"save()\">{{'save' | translate}}</button>\n  </span>\n</div>\n\n\n\n\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\nimport {HttpService} from \"../../http.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ListResolverService implements Resolve<any> {\n\n  constructor(\n    private http: HttpService\n  ) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any {\n    return this.http.getWordList(route.params['id']);\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {WordComponent} from \"./component/word/word.component\";\nimport {LanguageResolverService} from \"./service/resolver/language/language-resolver.service\";\nimport {WordListComponent} from \"./component/word-list/word-list.component\";\nimport {ListResolverService} from \"./service/resolver/list/list-resolver.service\";\nimport {WordListContentComponent} from \"./component/word-list/word-list-content/word-list-content.component\";\n\nconst routes: Routes = [\n  {\n    path: 'word', component: WordComponent, resolve: {\n      languages: LanguageResolverService\n    }\n  },\n  {\n    path: 'list', children: [\n      {\n        path: ':id', component: WordListComponent, resolve: {\n          languages: LanguageResolverService,\n          list: ListResolverService\n        }\n      },\n      {\n        path: ':id/words', component: WordListContentComponent, resolve: {\n\n        }\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\nimport {HttpService} from \"../../http.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageResolverService implements Resolve<any> {\n\n  constructor(private http: HttpService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any {\n    return this.http.getLanguages();\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}