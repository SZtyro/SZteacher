{"version":3,"sources":["./src/app/service/http.service.ts","./src/environments/environment.ts","./src/app/component/word/word.component.ts","./src/app/component/word/word.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/app/service/resolver/language/language-resolver.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  prefix: String = 'api/'\n\n  constructor(private http: HttpClient) {\n  }\n\n  getWords(filter) {\n    return this.http.get<any[]>(this.prefix + 'word', {params: {filter: filter}});\n  }\n\n  saveWord(body) {\n    return this.http.post(this.prefix + 'word', body);\n  }\n\n  getLanguages(){\n    return this.http.get(this.prefix + 'language');\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {Component, OnInit} from '@angular/core';\nimport {Subject, timer} from \"rxjs\";\nimport {HttpService} from \"../../service/http.service\";\nimport {debounce} from \"rxjs/operators\";\nimport {ActivatedRoute} from \"@angular/router\";\n\n@Component({\n  selector: 'app-word',\n  templateUrl: './word.component.html',\n  styleUrls: ['./word.component.scss']\n})\nexport class WordComponent implements OnInit {\n\n  subject = new Subject();\n  words: any[];\n  word: String;\n  translations: String[] = [];\n  translation: String;\n  languageId;\n  translationLanguageId;\n  languages;\n\n  constructor(\n    private http: HttpService,\n    private route: ActivatedRoute\n  ) {\n\n  }\n\n  ngOnInit(): void {\n    this.route.data.subscribe(data => {\n      this.languages = data.languages;\n    });\n\n    this.subject.pipe(debounce(() => timer(500))).subscribe(filter => {\n      if (filter != null)\n        this.http.getWords(filter).subscribe(words => {\n          this.words = words;\n        })\n    })\n\n  }\n\n  search($event) {\n    this.subject.next($event.target.value.toLowerCase())\n  }\n\n  save() {\n\n    let body = {\n      \"languageId\": this.languageId,\n      \"original\": this.word,\n      \"translationLanguageId\": this.translationLanguageId,\n      \"translation\": this.translations\n    }\n\n\n    this.http.saveWord(body).subscribe(\n      () => {\n        this.word = null;\n        this.languageId = null;\n        this.translationLanguageId = null;\n      },\n      err => {\n      }\n    )\n  }\n\n  setWord(word) {\n\n    this.languageId = word['language'].id;\n    this.translationLanguageId = word['translationLanguage'].id;\n    this.word = word['original'];\n    this.translations = word['translation'].split(\",\")\n  }\n\n  addTranslation() {\n    if (this.translation != null && this.translation != \"\") {\n      this.translations.push(this.translation);\n      this.translation = null;\n    }\n  }\n\n  deleteTranslation(trnanslation) {\n    this.translations.splice(this.translations.indexOf(trnanslation), 1);\n  }\n}\n","<div class=\"container-fluid row m-0\" style=\"height: 100vh; justify-content: space-between\">\n  <span class=\"p-0\">\n    <span class=\"col-12 col-md-6\">\n\n\n        <mat-form-field appearance=\"outline\" style=\"width: 100%\">\n          <mat-label translate>word</mat-label>\n          <input matInput [(ngModel)]=\"word\" (keyup)=\"search($event)\">\n        </mat-form-field>\n\n\n      <div *ngFor=\"let word of words\" (click)=\"setWord(word)\" class=\"translation\">\n        <h5 style=\"margin: 0px\">{{word['original']}}</h5>\n        <span>\n          <img [src]=\"'https://www.countryflags.io/'+ word['language'].lang.split('_')[1]+'/flat/16.png'\">\n        </span>\n      </div>\n    </span>\n\n    <span class=\"col-12 col-md-6 row m-0 p-0\">\n\n      <mat-form-field appearance=\"outline\" class=\"col-12 col-md-6 m-0 p-0\">\n      <mat-label translate>language</mat-label>\n      <mat-select [(ngModel)]=\"languageId\">\n        <mat-option *ngFor=\"let language of languages\" [value]=\"language.id\" class=\"flag\">\n          {{language.lang | translate}}\n          <span>\n            <img [src]=\"'https://www.countryflags.io/'+ language.lang.split('_')[1]+'/flat/16.png'\">\n          </span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n\n\n\n    <mat-form-field appearance=\"outline\" class=\"col-12 col-md-6 m-0 p-0\">\n      <mat-label translate>language</mat-label>\n      <mat-select [(ngModel)]=\"translationLanguageId\">\n        <mat-option *ngFor=\"let language of languages\" [value]=\"language.id\" class=\"flag\">\n          {{language.lang | translate}}\n          <span>\n            <img [src]=\"'https://www.countryflags.io/'+ language.lang.split('_')[1]+'/flat/16.png'\">\n          </span>\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n\n\n    <span>\n      <div>\n          <mat-form-field appearance=\"outline\" style=\"width: 100%\" class=\"form-field-with-button m-0 p-0\">\n            <mat-label translate>translation</mat-label>\n            <div style=\"display: flex\">\n              <input matInput [(ngModel)]=\"translation\">\n            <button style=\"float:right\" mat-button (click)=\"addTranslation()\" translate><mat-icon>add</mat-icon></button>\n            </div>\n          </mat-form-field>\n      </div>\n\n\n      <div *ngFor=\"let translation of translations\" class=\"translation\">\n        <h5 style=\"margin: 0px\">{{translation}}</h5>\n        <button mat-button color=\"primary\" (click)=\"deleteTranslation(translation)\">\n          <mat-icon>\n            clear\n          </mat-icon>\n        </button>\n      </div>\n    </span>\n    </span>\n  </span>\n\n  <span class=\"bottom-buttons\">\n      <button class=\"col-12 col-sm-6 col-md-3\" style=\"height: 45px; \" mat-raised-button color=\"primary\"\n              (click)=\"save()\" translate>save</button>\n  </span>\n</div>\n\n\n","import {Component, OnInit} from '@angular/core';\nimport {Subject, timer} from \"rxjs\";\nimport {HttpService} from \"./service/http.service\";\nimport {debounce, debounceTime} from \"rxjs/operators\";\nimport {TranslateService} from \"@ngx-translate/core\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(\n    private translate: TranslateService\n  ) {\n    translate.addLangs([ 'pl']);\n    translate.setDefaultLang('pl');\n    translate.use('pl')\n  }\n\n\n}\n","<router-outlet></router-outlet>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport {WordComponent} from './component/word/word.component';\nimport {FormsModule} from \"@angular/forms\";\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslateLoader, TranslateModule} from \"@ngx-translate/core\";\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatInputModule} from \"@angular/material/input\";\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslateHttpLoader} from '@ngx-translate/http-loader';\n\nexport function HttpLoaderFactory(httpClient: HttpClient) {\n  return new TranslateHttpLoader(httpClient);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    WordComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    MatFormFieldModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    }),\n    MatSelectModule,\n    MatInputModule,\n    MatIconModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {WordComponent} from \"./component/word/word.component\";\nimport {LanguageResolverService} from \"./service/resolver/language/language-resolver.service\";\n\nconst routes: Routes = [\n  {\n    path: 'word', component: WordComponent, resolve: {\n      languages: LanguageResolverService\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\nimport {HttpService} from \"../../http.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LanguageResolverService implements Resolve<any> {\n\n  constructor(private http: HttpService) {\n  }\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> | Promise<any> | any {\n    return this.http.getLanguages();\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}